For this project, our main goal was to get experience in writing a program that runs in parallel on Linux using threads and synchronization. The program takes an stdin file and reads it line by line. It takes each string and passes it to its respective space in queue #1. The next function takes each line and replaces the space characters with an asterisk. Then, each new string is passed to queue #2. Following this queue, the next function takes the strings from the queue and replaces lower-case characters with upper-case characters. The program then passes the each of these new strings to queue #3. The last function is the write function, which writes each ending string to the console. We use pthreads for each separate function to create synchronization between the queues and build on strings from one queue to the next.

We created 2 different files:

main.c- This file creates the different pthreads and uses them by implementing the Reader, Munch1, Munch2, and Writer functions. It also initializes and creates the 3 queues used in between the threads. In addition to the strings modified from the stdin file, the queue statistics are printed out at the end.
module.c- This file handles all of the information attached to the queues. The functions implemented in this file are CreateStringQueue, EnqueueString, DequeueString, and PrintQueueStatistics. Whenever one of the thread functions in main.c calls enqueue or dequeue, this file passes that information to the correct queue and space in the queue to accomplish whatever the thread function is asking the queue to do. We implemented our semaphore variables in this file as well that check to make sure it is okay to add/remove a string from a queue when information is being passed in. The semaphores use the wait and post methods to accomplish this.

To compile this program, simply run the makefile. Then, type in the desired file that is to be parsed and printed out.
